name: Frontend Continuous Deployment

on:
  push:
    branches:
      - main  # Automatically triggers the workflow on pushes to the main branch
  workflow_dispatch: # Allows manual start of the workflow from the GitHub Actions tab

jobs:
  Code_Analysis:
    runs-on: ubuntu-latest
    environment: DevEnv  # Specifies the deployment environment
    steps:
      - name: Checkout The Source Code
        uses: actions/checkout@v3  # Checks out the repository so code can be accessed in subsequent steps
      - name: Set Up Node.js Environment
        uses: actions/setup-node@v3  # Sets up Node.js environment for consistency
        with:
          node-version: 18  # Specifies the Node.js version
          cache: 'npm'  # Enables npm caching for faster dependency installation
          cache-dependency-path: starter/frontend/package-lock.json  # Points to package-lock.json for cache validity
      - name: Install Requirements/Dependencies
        working-directory: starter/frontend  # Specifies the working directory
        run: npm ci  # Installs dependencies listed in package-lock.json
      - name: Execute Lint Checks
        working-directory: starter/frontend  # Specifies the working directory
        run: npm run lint  # Runs linting to ensure code quality

  Unit_Testing:
    runs-on: ubuntu-latest  # Defines the OS environment
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3  # Checks out the repository
      - name: Set Up Node.js Environment
        uses: actions/setup-node@v3  # Sets up Node.js environment for testing
        with:
          node-version: 18  # Specifies the Node.js version
          cache: 'npm'  # Uses npm cache for dependencies
          cache-dependency-path: starter/frontend/package-lock.json  # Points to package-lock.json for cache validation
      - name: Install Project Requirements/Dependencies
        working-directory: starter/frontend  # Specifies the working directory
        run: npm ci  # Installs dependencies in a clean environment
      - name: Execute Tests
        working-directory: starter/frontend  # Specifies the working directory
        run: npm run test  # Runs tests to verify code functionality

  Build_and_Deploy:
    needs: [Code_Analysis, Unit_Testing]  # Ensures this job runs only if linting & tests pass
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3  # Checks out the repository
      - name: Set Up Node.js Environment
        uses: actions/setup-node@v3  # Sets up Node.js environment for build
        with:
          node-version: 18  # Specifies the Node.js version
          cache: 'npm'  # Enables npm caching for faster installation
          cache-dependency-path: starter/frontend/package-lock.json  # Uses package-lock.json for cache validation
      - name: Authenticate AWS
        uses: aws-actions/configure-aws-credentials@v2  # Configures AWS credentials for secure access
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Access Key stored in GitHub Secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Secret Key stored in GitHub Secrets
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  # Session token, if applicable
          aws-region: ${{ secrets.AWS_REGION }}  # AWS region for deployment
      - name: ECR Login
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2  # Logs into Amazon ECR to enable Docker image push
      - name: Build Then Push Created Docker Image
        working-directory: starter/frontend  # Sets working directory to frontend
        env:
          IMAGE_TAG: latest  # Tag for the Docker image
          REPO_NAME: frontend  # Repository name in ECR
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag 736618489805.dkr.ecr.us-west-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG .  # Builds Docker image with specified tag
          docker push 736618489805.dkr.ecr.us-west-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG  # Pushes Docker image to Amazon ECR
      - name: Set Up Kubernetes Config
        run: |
          aws eks update-kubeconfig --name cluster --region us-west-1  # Configures kubeconfig for accessing the EKS cluster
      - name: Deploy to EKS
        working-directory: starter/frontend/k8s  # Specifies Kubernetes config directory
        env:
          IMAGE_TAG: latest  # Docker image tag for deployment
          REPO_NAME: frontend  # ECR repository name
        run: |
          kustomize edit set image frontend=736618489805.dkr.ecr.us-west-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG  # Updates deployment image in kustomize config
          kustomize build | kubectl apply -f -  # Builds kustomize configuration and deploys to EKS