name: Backend Continuous Deployment

on:
  pull_request:
    branches:
      - main  # Automatically triggers on pull requests to the main branch
  workflow_dispatch: # Allows manual start of the workflow

jobs:
  Code_Analysis:
    runs-on: ubuntu-latest
    environment: DevEnv  # Specifies the deployment environment

    steps:
      - name: Retrieve Repository Code
        uses: actions/checkout@v3  # Checks out the repository for code access
      - name: Install Python 3.10
        uses: actions/setup-python@v4  # Sets up Python environment
        with:
          python-version: "3.10"  # Specifies Python version for consistency
      - name: Install Linting Requirements
        working-directory: starter/backend  # Sets the backend directory as working context
        run: |
          python -m pip install --upgrade pip  # Upgrades pip
          pip install pipenv  # Installs pipenv for dependency management
          pip install flake8  # Installs flake8 for linting
      - name: Execute Lint Check
        working-directory: starter/backend  # Ensures linting runs in backend directory
        run: pipenv run lint  # Executes flake8 to ensure code quality

  Unit_Testing:
    runs-on: ubuntu-latest  # Specifies the environment for running tests
    steps:
      - name: Retrieve Repository Code
        uses: actions/checkout@v3  # Checks out the repository
      - name: Set Up Python Environment
        uses: actions/setup-python@v4  # Sets up Python environment
        with:
          python-version: "3.10"  # Ensures the same Python version is used as in linting
      - name: Install Testing Requirements/Dependencies
        working-directory: starter/backend  # Sets backend as the working directory
        run: |
          python -m pip install --upgrade pip  # Upgrades pip for consistency
          pip install pipenv  # Installs pipenv for environment management
          pip install flake8  # Installs flake8, used during testing as well
      - name: Execute Tests
        working-directory: starter/backend  # Runs tests within the backend folder
        run: |
          pipenv install pytest  # Installs pytest for running tests
          pipenv run test  # Executes tests using pytest

  Docker_Build_And_Deploy:
    needs: [Code_Analysis, Unit_Testing]  # Ensures this job runs only if linting and tests succeed
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve Repository Code
        uses: actions/checkout@v3  # Checks out the repository for Docker build access
      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2  # Configures AWS credentials for ECR access
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Access Key from GitHub Secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Secret Key from GitHub Secrets
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  # Session token if required
          aws-region: ${{ secrets.AWS_REGION }}  # Specifies AWS region
      - name: Authenticate to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2  # Logs into ECR for pushing Docker images
      - name: Build and Push Docker Image to ECR
        working-directory: starter/backend  # Uses backend directory as working context
        env:
          IMAGE_TAG: latest  # Sets Docker image tag to latest
          REPO_NAME: backend  # Specifies ECR repository name
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag 736618489805.dkr.ecr.us-west-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG .  # Builds Docker image
          docker push 736618489805.dkr.ecr.us-west-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG  # Pushes Docker image to Amazon ECR
      - name: Configure EKS Access
        run: |
          aws eks update-kubeconfig --name cluster --region us-west-1  # Configures kubectl to access EKS cluster
      - name: Deploy to Amazon EKS
        working-directory: starter/backend/k8s  # Specifies Kubernetes config directory
        env:
          IMAGE_TAG: latest  # Docker image tag for deployment
          REPO_NAME: backend  # ECR repository name
        run: |
          kustomize edit set image backend=736618489805.dkr.ecr.us-west-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG  # Updates image in kustomize config
          kustomize build | kubectl apply -f -  # Builds and applies Kubernetes manifests